WEBVTT

1
00:00:01.800 --> 00:00:05.310
Hello, and welcome to yet
another worked exercise for

2
00:00:05.310 --> 00:00:08.677
Python for Informatics,
Exploring Information.

3
00:00:08.677 --> 00:00:09.894
I'm Charles Severance.

4
00:00:09.894 --> 00:00:14.580
I am your tour guide to this
particular worked example.

5
00:00:14.580 --> 00:00:21.017
This material is creative
example attribution.

6
00:00:21.017 --> 00:00:25.623
This is part of my www.pythonlearn.com
website that helps you to

7
00:00:25.623 --> 00:00:29.902
learn Python sorta from the very
beginning with the videos and

8
00:00:29.902 --> 00:00:33.453
other materials to help you
go along with the book.

9
00:00:33.453 --> 00:00:37.019
Of course the book is
Creative Commons Attributions, so

10
00:00:37.019 --> 00:00:41.640
pretty much everything here is free for
you to use and adapt as you see fit.

11
00:00:43.460 --> 00:00:50.545
So, we're taking sort of a working
example from the Tuples chapter and

12
00:00:50.545 --> 00:00:58.780
the task that we're given is find
the ten most common words in a file.

13
00:00:58.780 --> 00:01:01.280
And we will do that.

14
00:01:01.280 --> 00:01:06.150
So, if we take a look at the basic overall
structure, we're going to read a file.

15
00:01:06.150 --> 00:01:09.360
We're going to make a dictionary,
and empty dictionary, and

16
00:01:09.360 --> 00:01:12.220
we're going read the file line by line.

17
00:01:12.220 --> 00:01:16.260
We're going to split each line,
then we're going to loop through the line

18
00:01:17.540 --> 00:01:21.260
using the dictionary pattern from
the dictionaries chapter using get,

19
00:01:21.260 --> 00:01:25.300
so that we can both access and initialize.

20
00:01:25.300 --> 00:01:27.920
New words that we haven't seen,
at the same time.

21
00:01:29.460 --> 00:01:32.270
And then we need to sort, right, but

22
00:01:32.270 --> 00:01:35.410
we need to sort by the value
instead of the key.

23
00:01:35.410 --> 00:01:40.540
So we're going to make a list, and then
we're going to loop through the results

24
00:01:40.540 --> 00:01:45.560
of the dictionary, and
we're going to make a new tuple.

25
00:01:45.560 --> 00:01:48.420
But instead of being key-value,
which is what you get from items,

26
00:01:48.420 --> 00:01:50.520
we're going to do value-key.

27
00:01:50.520 --> 00:01:53.980
And then we'll sort that in reverse order,
and

28
00:01:53.980 --> 00:02:00.010
then we'll simply print the first ten
elements of that sorted in reverse order.

29
00:02:00.010 --> 00:02:04.102
And because we're constructing
carefully this new tuple

30
00:02:04.102 --> 00:02:07.120
value key in the right order.

31
00:02:07.120 --> 00:02:10.830
Value will be what's sorted on first and
then in cases where value matches,

32
00:02:10.830 --> 00:02:11.790
it will sort on key.

33
00:02:11.790 --> 00:02:14.920
Whereas, if we just took items
which is key value tuples,

34
00:02:14.920 --> 00:02:16.890
then it would sort on the key.

35
00:02:16.890 --> 00:02:17.960
And that's quite easy.

36
00:02:17.960 --> 00:02:20.770
So, that's the basic idea.

37
00:02:20.770 --> 00:02:23.540
So, let's go ahead and get started.

38
00:02:28.447 --> 00:02:32.830
So I'm going to grab some of this and
save myself a little bit of time.

39
00:02:32.830 --> 00:02:38.007
And paste that in.

40
00:02:38.007 --> 00:02:42.010
I'm gonna use actually romeo-short,
because I don't want to mess with it.

41
00:02:42.010 --> 00:02:47.159
Romeo has punctuation in it,
so I'm gonna go and

42
00:02:47.159 --> 00:02:52.307
I'll call this under
tuples I'm gonna call this

43
00:02:52.307 --> 00:02:57.835
guy topten.py and
see if it's in my tuples folder,

44
00:02:57.835 --> 00:03:01.749
yep, just always sanity checking.

45
00:03:01.749 --> 00:03:07.360
So let's go ahead to PythonLearn and
grab that Romeo short file

46
00:03:18.367 --> 00:03:20.420
So I want to grab Romeo short.

47
00:03:20.420 --> 00:03:26.080
If I look at Romeo short conveniently has,
or

48
00:03:26.080 --> 00:03:31.480
just Romeo conveniently
has the punctuation moved,

49
00:03:31.480 --> 00:03:33.520
and it's small, so we can do debugging.

50
00:03:33.520 --> 00:03:37.460
Romeo full is a little harder and we cover
that in the book in some more detail,

51
00:03:37.460 --> 00:03:39.030
to get rid of punctuation and stuff.

52
00:03:39.030 --> 00:03:42.300
Not too bad, but
we won't talk about it here.

53
00:03:42.300 --> 00:03:46.556
So I'm gonna grab Romeo.txt and
I'll save this to my

54
00:03:46.556 --> 00:03:51.910
tuples folder as Romeo.txt.

55
00:03:52.990 --> 00:03:55.600
And I should be done with that now,
and I'm done with that, so

56
00:03:55.600 --> 00:04:01.130
if I take a look at tuples again, I've got
romeo.txt and this file topten.py, and

57
00:04:01.130 --> 00:04:06.870
it's not romeo, it's romeo.txt,
and I'm just gonna split.

58
00:04:06.870 --> 00:04:11.780
I hope by now you can read a text file and

59
00:04:11.780 --> 00:04:15.530
split it into words, and
count those words in a dictionary.

60
00:04:15.530 --> 00:04:17.490
So, I'm just gonna print
out the dictionary,

61
00:04:17.490 --> 00:04:21.140
the counts dictionary that we got at
the end, and let's see how that works.

62
00:04:21.140 --> 00:04:24.790
So, I'll go into my desktop,
and this is under tuples.

63
00:04:28.073 --> 00:04:32.499
And so there's romeo.txt and topten.py so

64
00:04:32.499 --> 00:04:36.140
let's go ahead and run topten.py.

65
00:04:36.140 --> 00:04:37.450
And so there we go.

66
00:04:37.450 --> 00:04:43.150
We have just sort of roared through,
broke it into words, broke it into lines.

67
00:04:43.150 --> 00:04:48.340
We have a nice convenient
little thing here.

68
00:04:48.340 --> 00:04:49.760
Now, you know what?

69
00:04:49.760 --> 00:04:52.063
I'm gonna do one thing
that's not in the example.

70
00:04:52.063 --> 00:04:54.676
The fact that these are uppercase,

71
00:04:54.676 --> 00:04:59.206
I don't know if it's gonna cause
a problem or not but I wanna,

72
00:04:59.206 --> 00:05:05.000
this bothers me, and so I'm gonna
force all the words to be lowercase.

73
00:05:05.000 --> 00:05:08.450
And so I'm gonna call,
I'm gonna make a thing.

74
00:05:08.450 --> 00:05:12.684
Word = word.lower.

75
00:05:12.684 --> 00:05:13.628
Think it's lower?

76
00:05:13.628 --> 00:05:15.130
We'll find out fast enough.

77
00:05:15.130 --> 00:05:17.690
So I'm just gonna grab
a lowercase version of word and

78
00:05:17.690 --> 00:05:23.230
make it be wrd, and that's why
I'm gonna put into my dictionary.

79
00:05:23.230 --> 00:05:25.490
So let me run this again,
see if I got it right.

80
00:05:25.490 --> 00:05:26.110
Yeah.

81
00:05:26.110 --> 00:05:29.630
So now we see things
like Who is lower case?

82
00:05:29.630 --> 00:05:31.040
I don't think it changed
any of the numbers.

83
00:05:31.040 --> 00:05:32.160
It may have.

84
00:05:32.160 --> 00:05:36.900
But, I think we shouldn't
treat upper case or

85
00:05:36.900 --> 00:05:40.090
we should make this case insensitive so
we'll map everything to lower case.

86
00:05:40.090 --> 00:05:43.190
So I just did that by
mapping it to lower and then

87
00:05:44.960 --> 00:05:49.670
using wrd instead of
word after I made a copy.

88
00:05:49.670 --> 00:05:50.840
So here we go.

89
00:05:50.840 --> 00:05:53.100
So then what I'm gonna do
is I have my counts and

90
00:05:53.100 --> 00:05:55.770
I'm gonna print the results of the items.

91
00:05:57.400 --> 00:06:03.630
So that gives us a list instead of just
showing it, it gives us a list of tuples.

92
00:06:03.630 --> 00:06:07.330
So there's a tuple,
it's a two-item tuple, tuple.

93
00:06:07.330 --> 00:06:09.920
Tuple and its key value pairs.

94
00:06:09.920 --> 00:06:15.050
Okay, this is useful now, in particular
because we can construct a for

95
00:06:15.050 --> 00:06:18.768
loop that goes through for

96
00:06:18.768 --> 00:06:22.910
kie, val.

97
00:06:22.910 --> 00:06:23.740
Key and Value.

98
00:06:27.329 --> 00:06:34.416
Key val equals, I'm sorry, in count.items.

99
00:06:34.416 --> 00:06:39.370
I get all confused trying to create
really non-pneumonic variables.

100
00:06:39.370 --> 00:06:46.398
So we've got key and val and
it's two iteration variables.

101
00:06:46.398 --> 00:06:52.611
And The way

102
00:06:52.611 --> 00:06:57.351
it works is these will iterate
through each tuple, tuple, tuple,

103
00:06:57.351 --> 00:07:01.839
and then key will be the first
thing in a tuple, which is the key,

104
00:07:01.839 --> 00:07:07.090
and the value will be the second
thing in the tuple, key val, key val.

105
00:07:07.090 --> 00:07:10.470
And so, kie will bounce through these

106
00:07:10.470 --> 00:07:14.140
at the same time as vaal is gonna bounce
through the corresponding values.

107
00:07:14.140 --> 00:07:15.410
So that's quite nice.

108
00:07:17.190 --> 00:07:21.022
So just, I always love sanity checks, so

109
00:07:21.022 --> 00:07:26.169
I'm gonna print out kie and
vaal, just print them out.

110
00:07:28.866 --> 00:07:31.537
Yeah, somethings wrong.

111
00:07:31.537 --> 00:07:35.537
Key, val, end, oh, counts.

112
00:07:35.537 --> 00:07:37.137
So, if I, so, here we go.

113
00:07:37.137 --> 00:07:41.420
Trace back line 11,
the name count is not defined.

114
00:07:41.420 --> 00:07:43.760
I was so
quick I didn't even read what it told me.

115
00:07:43.760 --> 00:07:47.110
So, look at line 11,
though I'm on line 11 and I forgot my s.

116
00:07:47.110 --> 00:07:48.480
So, it's pretty much,

117
00:07:48.480 --> 00:07:51.970
once you get used to this it's pretty
much tell me what it wants to do.

118
00:07:51.970 --> 00:07:54.960
So now I'm going through my tuples, here's
my tuples, and now I'm going through

119
00:07:54.960 --> 00:07:58.510
the tuples one at a time, just dumping
them out in a loop and away we go.

120
00:07:58.510 --> 00:08:03.870
Now, the whole the problem is
is we want to make a new tuple.

121
00:08:05.960 --> 00:08:13.220
Okay, and I'm going to call this newtup,

122
00:08:13.220 --> 00:08:17.170
and I'm going to create a tuple, and I can
do this by just putting these two things

123
00:08:17.170 --> 00:08:23.310
in parenthesis, except that I
want val first and key second.

124
00:08:23.310 --> 00:08:24.070
Okay?

125
00:08:24.070 --> 00:08:26.050
So, I want val first and key second.

126
00:08:26.050 --> 00:08:28.045
Now I'm going to print out newtup.

127
00:08:32.709 --> 00:08:36.566
Now you'll see that as I loop
through each of the key value pairs,

128
00:08:36.566 --> 00:08:41.408
I'm just making a new tuple where they're
reversed, where the value is first and

129
00:08:41.408 --> 00:08:43.410
the key is second, right?

130
00:08:43.410 --> 00:08:45.840
So value, key, value, key, value, key.

131
00:08:45.840 --> 00:08:48.650
And, now I'm gonna stick this in a list.

132
00:08:50.830 --> 00:08:58.650
I'm gonna call my list flipped and
I'm gonna say give me an empty list.

133
00:09:01.230 --> 00:09:06.930
So I mean I'm starting an empty
list called flipped and

134
00:09:06.930 --> 00:09:10.120
I am going to tell flipped

135
00:09:11.760 --> 00:09:16.270
to append to itself, so I'm extending
this list each time through the loop.

136
00:09:16.270 --> 00:09:18.230
Take that newtup that I just made, so

137
00:09:18.230 --> 00:09:22.370
I've got newtup, and I'll take my print
statement out because that'll be obvious.

138
00:09:22.370 --> 00:09:27.333
So I'm gonna append newtup to
the end of my flipped list and

139
00:09:27.333 --> 00:09:31.602
then I'll print at the end
of this print flipped.

140
00:09:34.821 --> 00:09:38.628
Okay, so I make a tuple and instead of
printing it I just append it to this list

141
00:09:38.628 --> 00:09:41.020
and then I print the whole
list our afterwards.

142
00:09:41.020 --> 00:09:46.470
Okay, so this is a little messy but
here is the first list.

143
00:09:46.470 --> 00:09:48.460
It's got key value.

144
00:09:48.460 --> 00:09:49.810
And here is the second list.

145
00:09:49.810 --> 00:09:52.340
It's the exact same list as before.

146
00:09:52.340 --> 00:09:53.630
Except its value key.

147
00:09:54.630 --> 00:09:56.160
Now, it's exact same list.

148
00:09:56.160 --> 00:09:58.180
We didn't take anything out,
we didn't add anything,

149
00:09:58.180 --> 00:10:01.070
we didn't sum anything,
we didn't do anything.

150
00:10:01.070 --> 00:10:06.605
So then what is it that we're
going to do with this list.

151
00:10:06.605 --> 00:10:10.793
Well, we can use the totally, well,
let's just, we can use sorted but

152
00:10:10.793 --> 00:10:12.315
we're not gonna do that.

153
00:10:12.315 --> 00:10:13.514
I'm gonna do this.

154
00:10:13.514 --> 00:10:17.918
Now let's say, I wanna take that

155
00:10:17.918 --> 00:10:22.804
flip list and I wanna sort it, sort.

156
00:10:22.804 --> 00:10:24.830
And then print flipped.

157
00:10:26.610 --> 00:10:27.145
Just sort it.

158
00:10:27.145 --> 00:10:31.473
[SOUND] Now the key to sorting,
the key of awesomeness of sorting,

159
00:10:31.473 --> 00:10:34.713
is that sorting is done
by repeated comparison.

160
00:10:34.713 --> 00:10:39.660
And it's comparing this
tuple to this tuple.

161
00:10:39.660 --> 00:10:43.420
But the rules of tuple comparison,
is it first checks the first pair, and

162
00:10:43.420 --> 00:10:44.600
then it checks the second pair.

163
00:10:44.600 --> 00:10:48.760
It only checks the second pair
if the first pair doesn't match.

164
00:10:48.760 --> 00:10:52.090
So three one doesn't match and so

165
00:10:52.090 --> 00:10:54.910
it sorts it based on the three and
the one without even looking.

166
00:10:54.910 --> 00:10:58.290
But then when there is two threes
that match it actually does check

167
00:10:58.290 --> 00:10:59.730
the second two words.

168
00:10:59.730 --> 00:11:08.490
So three and will sort the and and
the the will decide where the 3 and

169
00:11:08.490 --> 00:11:12.800
the 3 the tuples end up sorting,
if that makes any sense.

170
00:11:12.800 --> 00:11:15.476
So let's just print this out.

171
00:11:15.476 --> 00:11:22.880
Actually, let's print,
print flipped, not clipped.

172
00:11:22.880 --> 00:11:24.633
We could make a clipped one, too, later.

173
00:11:24.633 --> 00:11:27.030
And I'm actually gonna
get rid of this print.

174
00:11:27.030 --> 00:11:29.829
So it's gonna print flipped before and
after.

175
00:11:29.829 --> 00:11:31.420
So watch this.

176
00:11:31.420 --> 00:11:33.090
So here's flipped before,

177
00:11:33.090 --> 00:11:37.240
it's been sorted in whatever order it was
in the dictionary in the first place.

178
00:11:37.240 --> 00:11:39.370
And now here's flipped.

179
00:11:39.370 --> 00:11:44.419
In the final order and
you see that it's in a sort of

180
00:11:44.419 --> 00:11:50.325
reverse order where 3 and,
is and not are here at the end.

181
00:11:50.325 --> 00:11:54.656
The 1s are in alphabetical order within
the 1s because tuples check, oops,

182
00:11:54.656 --> 00:11:56.500
don't do that, don't do that.

183
00:11:56.500 --> 00:11:58.980
That was nasty, bah that was really nasty.

184
00:12:00.900 --> 00:12:03.020
Because I was copying and pasting.

185
00:12:03.020 --> 00:12:08.530
So within all the 1s, it actually sorted
based on the alphabetic sort of the second

186
00:12:08.530 --> 00:12:15.810
parameter, or the second item in the
tuple, whereas the 2s all sorted later.

187
00:12:15.810 --> 00:12:19.250
So this actually isn't
quite what I wanted.

188
00:12:19.250 --> 00:12:23.700
So I'm going to say reverse equals true,

189
00:12:23.700 --> 00:12:27.840
because I actually want to sort it so
the big numbers are at the front.

190
00:12:27.840 --> 00:12:29.950
So let's run that little bit.

191
00:12:29.950 --> 00:12:31.580
So check that, right.

192
00:12:31.580 --> 00:12:36.510
So now I've got my same sort, it's got
the unsorted, no it's got the sorted,

193
00:12:36.510 --> 00:12:39.450
but the big numbers are at the beginning.

194
00:12:39.450 --> 00:12:42.600
You'll notice it's in sort of reverse
alphabetical order because the big

195
00:12:42.600 --> 00:12:45.050
words are at the beginning
among the threes, but whatever.

196
00:12:45.050 --> 00:12:47.440
We're close enough for government work.

197
00:12:47.440 --> 00:12:49.190
So now I wanna print out the top ten.

198
00:12:50.940 --> 00:12:54.587
Don't, I did that again.

199
00:12:54.587 --> 00:12:56.507
I want to print out the top ten.

200
00:12:56.507 --> 00:13:00.619
I'll just do the top five.

201
00:13:00.619 --> 00:13:02.923
So, I could do something simple.

202
00:13:02.923 --> 00:13:07.530
We'll get rid of this,
we trust that it's now properly sorted.

203
00:13:07.530 --> 00:13:08.292
I could say.

204
00:13:11.936 --> 00:13:17.670
Print this list up to but
not including five by using list slicing.

205
00:13:19.130 --> 00:13:20.170
So there we go.

206
00:13:20.170 --> 00:13:21.796
There's the top five.

207
00:13:21.796 --> 00:13:23.120
But that looks kind of ugly.

208
00:13:23.120 --> 00:13:25.040
Maybe it does, maybe it doesn't.

209
00:13:25.040 --> 00:13:28.640
So I'm gonna write a super cool for
loop, but again simple right?

210
00:13:28.640 --> 00:13:32.220
Just for me to check it I could say you
know, print the first five of flipped.

211
00:13:32.220 --> 00:13:35.000
This little list slicing
is a great way for

212
00:13:35.000 --> 00:13:39.430
using a lot of data to kinda keep
your data from being totally insane.

213
00:13:39.430 --> 00:13:40.260
Okay?

214
00:13:40.260 --> 00:13:41.280
So I'm gonna write a for loop.

215
00:13:42.580 --> 00:13:49.033
For key in value,

216
00:13:49.033 --> 00:13:53.776
in flipped.

217
00:13:53.776 --> 00:14:01.340
And now, I'm going to say only
go through the first five.

218
00:14:01.340 --> 00:14:03.850
So, this loop will only run for
the first five.

219
00:14:03.850 --> 00:14:05.330
Just like this only prints the first five,

220
00:14:05.330 --> 00:14:09.610
this is gonna iterate only
through the first five.

221
00:14:09.610 --> 00:14:13.130
And key and value will go through the keys
and the values of these first five.

222
00:14:13.130 --> 00:14:15.160
Three the, key value.

223
00:14:15.160 --> 00:14:16.380
Three is.

224
00:14:16.380 --> 00:14:18.809
And now I'm just gonna print a sweet,
cool message out.

225
00:14:27.808 --> 00:14:33.730
And, I'm just printing completely,
saying partially mnemonic things.

226
00:14:33.730 --> 00:14:37.930
So, I print out my top five keys and
values, so let's take a look at that,

227
00:14:37.930 --> 00:14:44.800
let's go ahead and run that baby winner,
3 is the, 3 is, 3 and.

228
00:14:44.800 --> 00:14:46.340
So we saw five of these things.

229
00:14:47.740 --> 00:14:49.390
Five of them, and
we're seeing the key and the value.

230
00:14:49.390 --> 00:14:54.190
They would probably be more
easily read if I just did that.

231
00:14:54.190 --> 00:14:57.410
3 the, 3 is,

232
00:14:57.410 --> 00:15:02.562
those are the top five
words in my little program.

233
00:15:02.562 --> 00:15:08.819
So let's take a look at this and
review, right?

234
00:15:08.819 --> 00:15:15.400
We open file, we make an empty dictionary,
we do our standard file loop.

235
00:15:15.400 --> 00:15:17.300
Splitting each line.

236
00:15:17.300 --> 00:15:19.120
New lines are kind of
chomped up in the split so

237
00:15:19.120 --> 00:15:20.340
we don't have to worry too much about it.

238
00:15:20.340 --> 00:15:22.390
We loop through the words.

239
00:15:22.390 --> 00:15:25.150
We change it to make it go lower case for
each word.

240
00:15:25.150 --> 00:15:30.230
We use the get pattern to both
initialize new words to one and

241
00:15:30.230 --> 00:15:34.170
add one to existing words by
using this awesome get-ness.

242
00:15:34.170 --> 00:15:42.390
Now we want to flip,
we wanna flip the order in each tuple.

243
00:15:42.390 --> 00:15:46.653
We wanna make the tuples from key values
tuples which we get from items to

244
00:15:46.653 --> 00:15:48.310
value key tuples.

245
00:15:48.310 --> 00:15:50.930
We append each of those tuples to a list.

246
00:15:50.930 --> 00:15:56.510
Then with the tuples that have the val and
the key in them.

247
00:15:57.960 --> 00:15:59.260
I can't write with this very well.

248
00:15:59.260 --> 00:16:04.000
We sort them in reverse order, but
the vowel is gonna be the most

249
00:16:04.000 --> 00:16:07.980
important thing you can sort it on because
it's the left most thing in the tuple.

250
00:16:07.980 --> 00:16:10.530
And then we simply print
out the last five,

251
00:16:12.190 --> 00:16:14.670
top five of this tuples after the sort.

252
00:16:15.940 --> 00:16:21.645
And so that pretty simple, print out the
top five words in this particular file.

253
00:16:21.645 --> 00:16:25.085
Okay, simple enough.

254
00:16:25.085 --> 00:16:27.150
Thanks a lot, see you on the net.